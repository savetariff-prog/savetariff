generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  documents     Document[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  stripeSubId       String?  @unique
  priceId           String?
  plan              Plan     @default(FREE)
  status            SubStatus @default(INCOMPLETE)
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Document {
  id          String     @id @default(cuid())
  userId      String
  title       String
  mime        String
  sizeBytes   Int
  storageUrl  String
  status      DocStatus  @default(UPLOADED)
  visibility  Visibility @default(PRIVATE)
  checksum    String
  createdAt   DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO_MONTHLY
  PRO_QUARTERLY
  PRO_SEMIANNUAL
  PRO_ANNUAL
}

enum SubStatus {
  INCOMPLETE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum DocStatus {
  UPLOADED
  PROCESSING
  INDEXED
  FAILED
}

enum Visibility {
  PRIVATE
  ORGANIZATION
}
